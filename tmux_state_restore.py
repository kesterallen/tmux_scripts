"""
Read a tmux_state.txt file and generate a script to recreate that tmux instance
"""

from collections import namedtuple
import os

Pane = namedtuple("Pane", "index window_index window_name cwd cmd")


def read_state_file(state_file: str = "~/tmux_state.txt") -> dict:
    """
    Read a tmux state file generated by

        tmux list-p -aF "#S;#I;#P;#W;#{pane_current_path};#{pane_pid}" | tee /tmp/.tmux1 | cut -d\; -f6 | xargs -I{} -n1 bash -c 'ps -hoargs --ppid {} || echo' >| /tmp/.tmux2; paste -d\; /tmp/.tmux? >| ~/tmux_state.txt

    and generate a tmux_state dict (session -> list-of-windows -> list-of-panes).

    Example input file:
        scorpius;1;1;gcloud;/home/kester/Dropbox/export/apple_health_export;4136;
        scorpius;1;2;gcloud;/home/kester/Dropbox/gcloud/projects/sf_p3;4143;
        scorpius;2;1;analytics and strainbanking db;/home/kester;4148;/home/kester/.virtualenv/twitter/bin/python /home/kester/.virtualenv/twitter/bin/pgcli -hscan1.amyris.local -p9999 -Uthemis_app -dscan1
        scorpius;2;2;analytics and strainbanking db;/home/kester;771282;/home/kester/.virtualenv/twitter/bin/python /home/kester/.virtualenv/twitter/bin/pgcli -hpgprod2.amyris.local -Ureadonly -dpgdbprod
        scorpius;3;1;meetings;/home/kester;4153;vim -O /home/kester/todo.txt /home/kester/home_todo.txt /home/kester/notes/meeting_notes.txt
        scorpius;4;1;codility;/home/kester/codility;4163;
        scorpius;5;1;discord_music;/home/kester/src/all-your-base-bot;4168;python ./ayb-bot
        scorpius;5;2;discord_music;/home/kester;841066;vim /home/kester/bin/mp3concat
        scorpius;6;1;footpedal;/home/kester;4173;vim /home/kester/src/javascript_timing.html
        scorpius;7;1;hermes robot protocol docs;/home/kester/src/hermes;62367;
        scorpius;8;1;bash;/home/kester;827155;
    """
    state_file = os.path.expanduser(state_file)
    with open(state_file, encoding="utf-8") as tmux_states:
        rows = [r.rstrip("\n") for r in tmux_states]

    state = {}
    for row in rows:
        (session, window_index, pane_index, window_name, cwd, pid, cmd) = row.split(";")

        # If this is a new session, add it:
        if session not in state:
            state[session] = []

        # Add this pane to its session
        pane = Pane(int(pane_index), int(window_index), window_name, cwd, cmd)
        state[session].append(pane)

    # Ensure that panes are sorted by window index, pane index
    for session in state:
        state[session].sort(key=lambda p: (p.window_index, p.index))
    return state


def main():
    """Read the state file and generate the recreate-the-state bash script."""
    cmds = []
    state = read_state_file()
    for session_name, panes in state.items():
        cmds.append(f"new-session -s {session_name} -d")

        for ipane, pane in enumerate(panes):
            # The pane should be split if its window index is different from
            # the previous pane's. This relies on the fact that the panes list
            # is sorted. The first pane can't be a split pane.
            is_split_pane = ipane > 0 and pane.window_index == panes[ipane - 1].window_index
            is_first_window = ipane == 0

            # Rename the inital window created at session start
            if is_first_window:
                cmd = f"""rename-window "{pane.window_name}" """
            # If a window contains multiple panes, create an additional pane here:
            elif is_split_pane:
                cmd = "split-window -h"
            # For the first pane of a new window, make the window, implicitly creating the pane
            else:
                cmd = f"""new-window -n "{pane.window_name}" -t "{session_name}" """
            cmds.append(cmd)

            sendkeys_args = f"""-t "{session_name}:{pane.window_name}" """
            cmds.append(f'send-keys {sendkeys_args} "cd {pane.cwd}" C-m')
            if pane.cmd:
                cmds.append(f'send-keys {sendkeys_args} "{pane.cmd}" C-m')

    print("\n".join([f"tmux {c}" for c in cmds]))


if __name__ == "__main__":
    main()
