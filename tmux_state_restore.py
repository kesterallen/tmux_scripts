"""
Read a tmux_state.txt file and generate a script to recreate that tmux instance
"""

from collections import namedtuple
import os

Window = namedtuple("Window", "index name panes")
Pane = namedtuple("Pane", "index cwd cmd")


def _sorted_windows(windows):
    """
    Convert index-to-window dict to a list of windows sorted by window index,
    with each window's panes sorted by pane index.
    """
    sorted_windows = []
    for window in sorted(windows.values(), key=lambda w: w.index):
        sorted_panes = sorted(window.panes, key=lambda p: p.index)
        sorted_window = Window(window.index, window.name, sorted_panes)
        sorted_windows.append(sorted_window)
    return sorted_windows


def read_state_file(state_file: str = "~/tmux_state.txt") -> dict:
    """
    Read a tmux state file generated by

        tmux list-p -aF "#S;#I;#P;#W;#{pane_current_path};#{pane_pid}" | tee /tmp/.tmux1 | cut -d\; -f6 | xargs -I{} -n1 bash -c 'ps -hoargs --ppid {} || echo' >| /tmp/.tmux2; paste -d\; /tmp/.tmux? >| ~/tmux_state.txt

    and generate a tmux_state dict (session -> list-of-windows -> list-of-panes).

    Example input file:
        scorpius;1;1;gcloud;/home/kester/Dropbox/export/apple_health_export;4136;
        scorpius;1;2;gcloud;/home/kester/Dropbox/gcloud/projects/sf_p3;4143;
        scorpius;2;1;analytics and strainbanking db;/home/kester;4148;/home/kester/.virtualenv/twitter/bin/python /home/kester/.virtualenv/twitter/bin/pgcli -hscan1.amyris.local -p9999 -Uthemis_app -dscan1
        scorpius;2;2;analytics and strainbanking db;/home/kester;771282;/home/kester/.virtualenv/twitter/bin/python /home/kester/.virtualenv/twitter/bin/pgcli -hpgprod2.amyris.local -Ureadonly -dpgdbprod
        scorpius;3;1;meetings;/home/kester;4153;vim -O /home/kester/todo.txt /home/kester/home_todo.txt /home/kester/notes/meeting_notes.txt
        scorpius;4;1;codility;/home/kester/codility;4163;
        scorpius;5;1;discord_music;/home/kester/src/all-your-base-bot;4168;python ./ayb-bot
        scorpius;5;2;discord_music;/home/kester;841066;vim /home/kester/bin/mp3concat
        scorpius;6;1;footpedal;/home/kester;4173;vim /home/kester/src/javascript_timing.html
        scorpius;7;1;hermes robot protocol docs;/home/kester/src/hermes;62367;
        scorpius;8;1;bash;/home/kester;827155;
    """
    state_file = os.path.expanduser(state_file)
    with open(state_file, encoding="utf-8") as tmux_states:
        rows = [r.rstrip("\n") for r in tmux_states]

    state = {}
    for row in rows:
        (session, window_index, pane_index, window_name, cwd, pid, cmd) = row.split(";")
        window = Window(int(window_index), window_name, [])
        pane = Pane(int(pane_index), cwd, cmd)

        # Add a new session
        if session not in state:
            state[session] = {}

        # Add a new window to a session
        if window.index not in state[session]:
            state[session][window.index] = window

        # Add a pane to the current window
        state[session][window.index].panes.append(pane)

    # Convert index-to-window dict to a list of windows sorted by window index
    return {s: _sorted_windows(ws) for s, ws in state.items()}


def main():
    """Read the state file and generate the recreate-the-state bash script."""
    cmds = []
    state = read_state_file()
    for session_name, windows in state.items():
        cmds.append(f"new-session -s {session_name} -d")

        for iwin, window in enumerate(windows):
            for ipane, pane in enumerate(window.panes):

                # If a window contains multiple panes, create an additional pane here:
                if ipane > 0:
                    cmd = "split-window -h"
                # Rename the inital window created at session start
                elif iwin == 0:
                    cmd = f"""rename-window "{window.name}" """
                # For the first pane of a new window, make the window, implicitly creating the pane
                else:
                    cmd = f"""new-window -n "{window.name}" -t "{session_name}" """
                cmds.append(cmd)

                sendkeys_args = f"""-t "{session_name}:{window.name}" """
                cmds.append(f'send-keys {sendkeys_args} "cd {pane.cwd}" C-m')
                if pane.cmd:
                    cmds.append(f'send-keys {sendkeys_args} "{pane.cmd}" C-m')

    print("\n".join([f"tmux {c}" for c in cmds]))


if __name__ == "__main__":
    main()
